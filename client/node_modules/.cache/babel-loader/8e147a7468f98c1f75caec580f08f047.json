{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData = null) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure());\n  }\n}\nexport function* signUpWithEmailAndPassword({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signUpWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user, {\n      displayName\n    });\n  } catch (error) {\n    yield put(signUpFailure(error.message));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpWithEmailAndPassword);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["D:/ReactJS/Projects/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","message","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUpWithEmailAndPassword","displayName","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure } from './user.actions';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData = null) {\r\n  try {\r\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(signInSuccess({\r\n      id: userSnapshot.id,\r\n      ...userSnapshot.data()\r\n    }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password }}) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error.message));\r\n  }\r\n}\r\n\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure());\r\n  }\r\n}\r\n\r\nexport function* signUpWithEmailAndPassword({payload: { email, password, displayName }}) {\r\n  try {\r\n    const { user } = yield auth.signUpWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user, {displayName});\r\n  } catch (error) {\r\n    yield put(signUpFailure(error.message))\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(\r\n    UserActionTypes.GOOGLE_SIGN_IN_START,\r\n    signInWithGoogle\r\n  );\r\n}\r\n\r\nexport function* onEmailSignStart() {\r\n  yield takeLatest(\r\n    UserActionTypes.EMAIL_SIGN_IN_START,\r\n    signInWithEmail\r\n  );\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(\r\n    UserActionTypes.CHECK_USER_SESSION,\r\n    isUserAuthenticated\r\n  )\r\n}\r\n\r\nexport function* onSignOutStart() {\r\n  yield takeLatest(\r\n    UserActionTypes.SIGN_OUT_START,\r\n    signOut\r\n  )\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(\r\n    UserActionTypes.SIGN_UP_START,\r\n    signUpWithEmailAndPassword\r\n  )\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignStart),\r\n    call(isUserAuthenticated),\r\n    call(onSignOutStart),\r\n    call(onSignUpStart)\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}