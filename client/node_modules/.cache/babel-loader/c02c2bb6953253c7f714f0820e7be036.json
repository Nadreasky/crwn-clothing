{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\Projects\\\\crwn-clothing\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { auth, signInWithGoogle } from '../../firebase/firebase.utils';\nimport { googleSignInStart } from '../../redux/user/user.actions';\nimport './sign-in.styles.scss';\n\nclass SignIn extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const {\n        email,\n        password\n      } = this.state;\n\n      try {\n        await auth.signInWithEmailAndPassword(email, password);\n        this.setState({\n          email: '',\n          password: ''\n        });\n      } catch (error) {\n        if (error.code === 'auth/user-not-found') {\n          alert(\"This user has not been existed!\");\n        }\n\n        console.error(error);\n      }\n    };\n\n    this.handleChange = event => {\n      const {\n        value,\n        name\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const {\n      googleSignInStart\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"sign-in\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      type: \"email\",\n      name: \"email\",\n      value: this.state.email,\n      handleChange: this.handleChange,\n      label: \"email\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      type: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      handleChange: this.handleChange,\n      label: \"password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"SIGN IN\"), React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"SIGN IN WITH GOOGLE\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart())\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["D:/ReactJS/Projects/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","FormInput","CustomButton","auth","signInWithGoogle","googleSignInStart","SignIn","Component","constructor","handleSubmit","event","preventDefault","email","password","state","signInWithEmailAndPassword","setState","error","code","alert","console","handleChange","value","name","target","render","props","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport { auth, signInWithGoogle } from '../../firebase/firebase.utils';\r\nimport { googleSignInStart } from '../../redux/user/user.actions';\r\n\r\nimport './sign-in.styles.scss';\r\n\r\nclass SignIn extends React.Component {\r\n   constructor() {\r\n     super();\r\n\r\n     this.state = {\r\n       email: '',\r\n       password: ''\r\n     }\r\n   }\r\n\r\n   handleSubmit = async event => {\r\n     event.preventDefault();\r\n\r\n     const { email, password } = this.state;\r\n\r\n     try {\r\n       await auth.signInWithEmailAndPassword(email, password);\r\n       this.setState({email: '', password: ''});\r\n     } catch (error) {\r\n       if (error.code === 'auth/user-not-found') {\r\n         alert(\"This user has not been existed!\");\r\n       }\r\n       console.error(error);\r\n     }\r\n   }\r\n\r\n   handleChange = event => {\r\n     const { value, name } = event.target;\r\n\r\n     this.setState({ [name]: value});\r\n   }\r\n\r\n   render() {\r\n     const { googleSignInStart } = this.props;\r\n     return (\r\n       <div className='sign-in'>\r\n         <h2>I already have an account</h2>\r\n         <span>Sign in with your email and password</span>\r\n\r\n         <form onSubmit={this.handleSubmit}>\r\n            <FormInput type='email' name='email' value={this.state.email} handleChange={this.handleChange} label='email' required />\r\n            <FormInput type='password' name='password' value={this.state.password} handleChange={this.handleChange} label='password' required />\r\n\r\n            <div className='buttons'>\r\n              <CustomButton type='submit'>SIGN IN</CustomButton>\r\n              <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>SIGN IN WITH GOOGLE</CustomButton>\r\n            </div>\r\n         </form>\r\n       </div>\r\n     )\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  googleSignInStart: () => dispatch(googleSignInStart())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}